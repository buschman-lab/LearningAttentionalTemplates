function data = ParseExploreExploitData(file_list, file_path_list, varargin)

% Parses explore/exploit data, combining all of the listed files into a
% single set of data for fitting

%% Parse optional inputs

%Default save filename is based off of the first file name passed
opts.Verbose = 1; %whether to be chatty about what we are doing

%Process optional inputs
if mod(length(varargin), 2) ~= 0, error('Must pass key/value pairs for options.'); end
for i = 1:2:length(varargin)
    try
        opts.(varargin{i}) = varargin{i+1};
    catch
        error('Couldn''t set option ''%s''.', varargin{2*i-1});
    end
end

%Check parameters
if ischar(file_list)
    file_list = {file_list}; 
    file_path_list = {file_path_list};
end

%% Loop through files, opening and parsing

data = struct('Block', [], 'BestColor', [], 'TargetColors', [], ...
    'TargetDist', [],'TargetLoc', [], 'PopoutInd', [], 'PopoutSize', [], 'StopCond', [], 'Resp', [], ...
    'RespErr', [], 'RT', [], 'ChosenColor', [],'Reward', [],'IdleTime', [] );

for cur_file_ind = 1:length(file_list)
    cur_file = file_list{cur_file_ind};
    cur_path = file_path_list{cur_file_ind};
    
    if opts.Verbose
        fprintf('Processing file %s...\n', file_list{cur_file_ind});
    end
        
    %Load data
    cd(cur_path)
    
    if exist(cur_file, 'file')
        warning off;
        if opts.Verbose, fprintf('\tloading...'); end
        file_data = load(cur_file, 'trials');
        if opts.Verbose, fprintf('done.\n'); end
        warning on;
    end
    
    cd ../..
    
    if opts.Verbose, fprintf('\tparsing...'); end
    %Loop through trials, extracting information
    blocks = NaN*ones(length(file_data.trials), 1);
    best_col = NaN*ones(length(file_data.trials), 1);
    target_cols = NaN*ones(length(file_data.trials), length(file_data.trials(1).Conditions.TargetColorAngles));
    target_dist = NaN*ones(length(file_data.trials), length(file_data.trials(1).Conditions.TargetColorAngles));
    target_loc = NaN*ones(length(file_data.trials), length(file_data.trials(1).Conditions.TargetColorAngles));
    popout_ind = NaN*ones(length(file_data.trials), 1);
    popout_size = NaN*ones(length(file_data.trials), 1);
    sc = NaN*ones(length(file_data.trials), 1);
    resp = NaN*ones(length(file_data.trials), 1);
    resp_err = NaN*ones(length(file_data.trials), 1);
    rt = NaN*ones(length(file_data.trials), 1);
    col_resp = NaN*ones(length(file_data.trials), 1);
    chosen_col = NaN*ones(length(file_data.trials), 1);
    reward = NaN*ones(length(file_data.trials), 1);
    idle_time = NaN*ones(length(file_data.trials), 1);
    for cur_trial = 1:length(file_data.trials)
        blocks(cur_trial) = file_data.trials(cur_trial).Conditions.BlockNo;
        best_col(cur_trial) = file_data.trials(cur_trial).Conditions.BestColor;        
        target_cols(cur_trial, :) = file_data.trials(cur_trial).Conditions.TargetColorAngles;
        target_dist(cur_trial, :) = file_data.trials(cur_trial).Conditions.TargetColorDistance;
        target_loc(cur_trial, :) = file_data.trials(cur_trial).Conditions.TargetColorToLocIndex;
        popout_ind(cur_trial) = file_data.trials(cur_trial).Conditions.PopoutIndex;
        popout_size(cur_trial) = file_data.trials(cur_trial).Conditions.PopoutSize;
        sc(cur_trial) = file_data.trials(cur_trial).Behavior.StopCondition;
        resp(cur_trial) = file_data.trials(cur_trial).Behavior.Response;
        resp_err(cur_trial) = file_data.trials(cur_trial).Behavior.ResponseError;
        rt(cur_trial) = file_data.trials(cur_trial).Behavior.ReactionTime;
        col_resp(cur_trial) = file_data.trials(cur_trial).Behavior.ColorResponse;
        chosen_col(cur_trial) = file_data.trials(cur_trial).Behavior.ChosenColor;
        reward(cur_trial) = file_data.trials(cur_trial).Reward.NumRewards;
        idle_time(cur_trial) = file_data.trials(cur_trial).Timing.IdleTime; %new
    end %trial loop
    
    %Add to overall structure
    data.Block = cat(1, data.Block, cat(2, cur_file_ind*ones(length(blocks), 1), blocks(:)));
    data.BestColor = cat(1, data.BestColor, best_col);
    data.TargetColors = cat(1, data.TargetColors, target_cols);
    data.TargetDist = cat(1, data.TargetDist, target_dist);
    data.TargetLoc = cat(1, data.TargetLoc, target_loc);
    data.PopoutInd = cat(1, data.PopoutInd, popout_ind);
    data.PopoutSize = cat(1, data.PopoutSize, popout_size);
    data.StopCond = cat(1, data.StopCond, sc);
    data.Resp = cat(1, data.Resp, resp);
    data.RespErr = cat(1, data.RespErr, resp_err);
    data.RT = cat(1, data.RT, rt);
    data.ChosenColor = cat(1, data.ChosenColor, chosen_col);
    data.Reward = cat(1, data.Reward, reward);
    data.IdleTime = cat(1, data.IdleTime, idle_time); %new
    
    if opts.Verbose, fprintf('done.\n'); end
end %file loop

data.Files = file_list;